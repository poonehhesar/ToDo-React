{"version":3,"sources":["Todo.js","Todos.js","Header.js","AddTodo.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Todo","backgroundColor","padding","borderBottom","textDecoration","this","props","todoProp","completed","id","title","style","getStyle","type","onChange","markCompleteProp2","bind","onClick","deleteTodoProp2","btnStyle","Component","background","color","border","borderRadius","cursor","float","Todos","console","log","todos","map","todoItem","key","markCompleteProp","deleteTodoProp","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","value","display","name","flexGrow","placeholder","About","Fragment","App","deleteTodo","axios","delete","then","res","filter","todo","post","data","markComplete","get","className","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ca38919.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Todo extends Component {\n  getStyle() {\n    return {\n      backgroundColor: \"pink\",\n      padding: \"10px\",\n      borderBottom: \"1px dotted #ffff\",\n\n      textDecoration: this.props.todoProp.completed ? \"line-through\" : \"none\",\n    };\n  }\n\n  render() {\n    const { id, title } = this.props.todoProp;\n\n    return (\n      <div style={this.getStyle()}>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markCompleteProp2.bind(this, id)}\n          ></input>\n          {title}\n          <button\n            onClick={this.props.deleteTodoProp2.bind(this, id)}\n            style={btnStyle}\n          >\n            X\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nconst btnStyle = {\n  background: \"#000000\",\n  color: \"#fff\",\n  border: \"none\",\n  padding: \"2px 6px\",\n  borderRadius: \"50%\",\n  cursor: \"pointer\",\n  float: \"right\",\n};\n\nTodo.propTypes = {\n  todoProp: PropTypes.object.isRequired,\n};\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport Todo from \"./Todo\";\nimport PropTypes from \"prop-types\";\n\nclass Todos extends Component {\n  render() {\n    console.log(this.props.todos);\n    const todos = this.props.todos;\n    return (\n      <div>\n        {todos.map((todoItem) => {\n          return (\n            <Todo\n              key={todoItem.id}\n              todoProp={todoItem}\n              markCompleteProp2={this.props.markCompleteProp}\n              deleteTodoProp2={this.props.deleteTodoProp}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n};\nexport default Todos;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>To do List</h1>\n      <Link style={linkStyle} to=\"/\">\n        Home\n      </Link>{\" \"}\n      |{\" \"}\n      <Link style={linkStyle} to=\"/about\">\n        About\n      </Link>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  backgroundColor: \"#000000\",\n  color: \"#fff\",\n  padding: \"10px\",\n  textAlign: \"center\",\n};\n\nconst linkStyle = {\n  color: \"#fff\",\n  textDecoration: \"none\",\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nexport default class AddTodo extends Component {\n  state = {\n    title: \"\",\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: \"\" });\n  };\n\n  onChange = (e) => this.setState({ title: e.target.value });\n\n  render() {\n    return (\n      <form style={{ display: \"flex\" }} onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          style={{ flexGrow: 1 }}\n          placeholder=\"add todo...\"\n          value={this.state.title}\n          onChange={this.onChange}\n        ></input>\n\n        <input type=\"submit\" name=\"submit\" value=\"submit\"></input>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is the TodoList app v1.0.0. It is part of a React crash course</p>\n    </React.Fragment>\n  );\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./Todos\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddTodo from \"./AddTodo\";\nimport About from \"./About\";\n//import { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=15\")\n      .then((res) => this.setState({ todos: res.data }));\n  }\n\n  deleteTodo = (id) => {\n    axios\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((res) =>\n        this.setState({\n          todos: this.state.todos.filter((todo) => todo.id !== id),\n        })\n      );\n  };\n\n  addTodo = (title) => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false,\n      })\n      .then((res) => this.setState({ todos: [...this.state.todos, res.data] }));\n  };\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\"></div>\n          <Header />\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos\n                  todos={this.state.todos}\n                  markCompleteProp={this.markComplete}\n                  deleteTodoProp={this.deleteTodo}\n                />\n              </React.Fragment>\n            )}\n          />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}