{"version":3,"sources":["Todo.js","Todos.js","App.js","serviceWorker.js","index.js"],"names":["Todo","backgroundColor","padding","borderBottom","textDecoration","this","props","todoProp","completed","style","getStyle","type","onChange","markCompleteProp2","bind","id","title","btnStyle","Component","background","color","border","borderRadius","cursor","float","Todos","console","log","todos","map","todoItem","key","markCompleteProp","App","state","markComplete","setState","todo","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOAGMA,E,yKAEF,MAAO,CACLC,gBAAiB,OACjBC,QAAS,OACTC,aAAc,mBAEdC,eAAgBC,KAAKC,MAAMC,SAASC,UAAY,eAAiB,U,+BAKnE,OACE,yBAAKC,MAAOJ,KAAKK,YACf,2BACE,2BACEC,KAAK,WACLC,SAAUP,KAAKC,MAAMO,kBAAkBC,KACrCT,KACAA,KAAKC,MAAMC,SAASQ,MAGvBV,KAAKC,MAAMC,SAASS,MACrB,4BAAQP,MAAOQ,GAAf,W,GAvBSC,aA6BbD,EAAW,CACfE,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRnB,QAAS,UACToB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAOMxB,ICnBAyB,E,uKAtBH,IAAD,OACPC,QAAQC,IAAItB,KAAKC,MAAMsB,OACvB,IAAMA,EAAQvB,KAAKC,MAAMsB,MACzB,OACE,6BACGA,EAAMC,KAAI,SAACC,GACV,OACE,kBAAC,EAAD,CACEC,IAAKD,EAASf,GACdR,SAAUuB,EACVjB,kBAAmB,EAAKP,MAAM0B,2B,GAXxBd,aCyCLe,G,kNAxCbC,MAAQ,CACNN,MAAO,CACL,CACEb,GAAI,EACJC,MAAO,WACPR,WAAW,GAEb,CACEO,GAAI,EACJC,MAAO,SACPR,WAAW,GAEb,CACEO,GAAI,EACJC,MAAO,QACPR,WAAW,K,EAKjB2B,aAAe,SAACpB,GACd,EAAKqB,SAAS,CACZR,MAAO,EAAKM,MAAMN,MAAMC,KAAI,SAACQ,GAI3B,OAHIA,EAAKtB,KAAOA,IACdsB,EAAK7B,WAAa6B,EAAK7B,WAElB6B,Q,uDAMX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAOV,MAAOvB,KAAK6B,MAAMN,MAAOI,iBAAkB3B,KAAK8B,oB,GAnC7CjB,cCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.f47e3b4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Todo extends Component {\n  getStyle() {\n    return {\n      backgroundColor: \"pink\",\n      padding: \"10px\",\n      borderBottom: \"1px dotted #ffff\",\n\n      textDecoration: this.props.todoProp.completed ? \"line-through\" : \"none\",\n    };\n  }\n\n  render() {\n    return (\n      <div style={this.getStyle()}>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markCompleteProp2.bind(\n              this,\n              this.props.todoProp.id\n            )}\n          ></input>\n          {this.props.todoProp.title}\n          <button style={btnStyle}>X</button>\n        </p>\n      </div>\n    );\n  }\n}\nconst btnStyle = {\n  background: \"#000000\",\n  color: \"#fff\",\n  border: \"none\",\n  padding: \"2px 6px\",\n  borderRadius: \"50%\",\n  cursor: \"pointer\",\n  float: \"right\",\n};\n\nTodo.propTypes = {\n  todoProp: PropTypes.object.isRequired,\n};\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport Todo from \"./Todo\";\nimport PropTypes from \"prop-types\";\n\nclass Todos extends Component {\n  render() {\n    console.log(this.props.todos);\n    const todos = this.props.todos;\n    return (\n      <div>\n        {todos.map((todoItem) => {\n          return (\n            <Todo\n              key={todoItem.id}\n              todoProp={todoItem}\n              markCompleteProp2={this.props.markCompleteProp}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n};\nexport default Todos;\n","import React, { Component } from \"react\";\nimport Todos from \"./Todos\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: \"stÃ¤da\",\n        completed: false,\n      },\n      {\n        id: 2,\n        title: \"handla\",\n        completed: false,\n      },\n      {\n        id: 3,\n        title: \"diska\",\n        completed: false,\n      },\n    ],\n  };\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Todos todos={this.state.todos} markCompleteProp={this.markComplete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}